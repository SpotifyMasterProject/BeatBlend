services:
  server:
    build:
      context: server
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - SPOTIFY_REDIRECT_URI=${SPOTIFY_REDIRECT_URI}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_SSL=${REDIS_SSL}
      - DISCOGS_API_URL=${DISCOGS_API_URL}
      - DISCOGS_API_TOKEN=${DISCOGS_API_TOKEN}
      - BASE_URL=${BASE_URL}
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
  client:
    build:
      context: client
      dockerfile: Dockerfile.prod
      args:
        VITE_SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
        VITE_SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}
        VITE_API_BASE_URL: ${API_BASE_URL}
        VITE_WS_BASE_URL: ${WS_BASE_URL}
    ports:
      - "80:80"
  redis:
    image: redis:alpine
  postgres:
    image: postgres:alpine
    volumes:
      - song-database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 1s
      retries: 5

volumes:
  song-database: